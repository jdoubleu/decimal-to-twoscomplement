{"version":3,"sources":["app.js"],"names":["w","d","V","invalidValue","numberPattern","wordLength","checkNumber","number","toString","match","repr","n","String","fromCharCode","reprReverse","s","charCodeAt","parseInt","convertDecimalToBase","base","rep","rem","Math","floor","replace","convertBaseToDecimal","ret","i","length","pos","charAt","pow","invertBinary","b","bin","split","map","v","car","join","twosComplement","res","sign","indexOf","substr","RangeError","el","data","value","blength","result","oct","hex","error","computed","gettwcs","watch","$el","querySelector","MaterialSnackbar","showSnackbar","timeout","message","setTimeout","methods","tc","_convertAndFill","ceil","log2","e","window","document","Vue"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * Adds a vue component and implements logic to convert decimal numbers to two's complement.\n *\n * @license MIT\n * @author Joshua Westerheide <dev@jdoubleu.de>\n */\n\n(function(w,d,V) {\n\n\t/**\n\t * Invalid value text\n\t * @type {string}\n\t */\n\tconst invalidValue = '?';\n\n\t/**\n\t * Regexp for a correct decimal number (as input)\n\t * @type {RegExp}\n\t */\n\tconst numberPattern = /^(\\+|-)?(0|[1-9]+[0-9]*)$/i;\n\n\t/**\n\t * Length of the displayed binary numbers (aka byte length)\n\t * @type {number}\n\t */\n\tlet wordLength = 8;\n\n\t/**\n\t * Checks whether the given number is valid\n\t * @param number\n\t * @returns {boolean}\n\t * @see numberPattern\n\t */\n\tconst checkNumber = number => {\n\t\treturn number.toString().match(numberPattern) != null;\n\t};\n\n\t/**\n\t * Converts all numbers larger than 9 to a letter/symbol\n\t * @param n\n\t * @returns {string}\n\t */\n\tconst repr = n => {\n\t\treturn n > 9 ? String.fromCharCode(65 /* 65 is A */ + n - 10) : n;\n\t};\n\n\t/**\n\t * Turns a given letter/symbol/number into a number\n\t * @param {string} s\n\t * @returns {number}\n\t * @see repr\n\t */\n\tconst reprReverse = s => {\n\t\ts = s.toString();\n\t\treturn s.charCodeAt(0) > 65 /* 65 is A */ ? s.charCodeAt(0)\t- 65 + 10 : parseInt(s);\n\t};\n\n\t/**\n\t * Converts a positive! decimal number into a number to the provided base.\n\t * @param {number} number\n\t * @param base\n\t * @returns {String}\n\t */\n\tconst convertDecimalToBase = (number, base = 10) => {\n\t\tlet rep = '',\n\t\t\trem = number;\n\n\t\t// Converts the given number using the base into its new representation\n\t\tdo {\n\t\t\trep = repr(rem % base) + rep;\n\t\t\trem = Math.floor(rem / base);\n\t\t} while(rem / base > 0);\n\n\t\t// Remove leading zeros\n\t\treturn rep.replace(/^0+(?!\\.|$)/, '');\n\t};\n\n\t/**\n\t * Converts a number of the given base to a decimal number\n\t * @param {string} number\n\t * @param base\n\t * @returns {number}\n\t */\n\tconst convertBaseToDecimal = (number, base = 2) => {\n\t\tlet ret = 0;\n\n\t\tfor(let i = number.length; i > 0; i--) {\n\t\t\tlet pos = number.length - i;\n\t\t\tret +=\treprReverse(number.charAt(i - 1)) * Math.pow(base, pos);\n\t\t}\n\n\t\treturn ret;\n\t};\n\n\t/**\n\t * Inverts a binary number according to two's complement\n\t * @param {string} bin\n\t */\n\tconst invertBinary = bin => {\n\t\t// Flip all bits\n\t\tlet b = bin.split('').map(v => {\n\t\t\treturn v == '1' ? '0' : '1';\n\t\t});\n\n\t\tlet i = b.length - 1,\n\t\t\tcar = 1;\n\t\t// Add +1\n\t\twhile(car == 1 && i >= 0) {\n\t\t\tif(b[i] == '1')\n\t\t\t\tb[i] = '0';\n\t\t\telse {\n\t\t\t\tb[i] = '1';\n\t\t\t\tcar = 0;\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\n\t\treturn b.join('');\n\t};\n\n\t/**\n\t * Converts a number to two's complement in binary format\n\t * @param number\n\t * @returns {String}\n\t * @throws RangeError\n\t */\n\tconst twosComplement = (number) => {\n\t\tlet res = number.toString(),\n\t\t\tsign = '+';\n\n\t\tif(['+', '-'].indexOf(res.charAt(0)) !== -1) {\n\t\t\tsign = res.charAt(0);\n\t\t\tres = res.substr(1);\n\t\t}\n\n\t\tif((sign == '+' && res >= Math.pow(2, wordLength - 1)) || (res > Math.pow(2, wordLength - 1)))\n\t\t\tthrow new RangeError('Given number can\\'t be represented by current word bit length (' + wordLength + ').');\n\n\t\tres = convertDecimalToBase(parseInt(res), 2);\n\n\t\t// Fill up to word length\n\t\twhile(wordLength > res.length)\n\t\t\tres = '0' + res;\n\n\t\tif(sign === '-')\n\t\t\tres = invertBinary(res);\n\n\t\treturn res;\n\t};\n\n\t/**\n\t * Calculator vue app\n\t * Implements the calculation logic and UI\n\t * @type {Vue}\n\t */\n\tnew V({\n\t\tel: '#app',\n\t\tdata: {\n\t\t\tvalue: 0,\n\t\t\tblength: 8,\n\t\t\tresult: {\n\t\t\t\tbin: 0,\n\t\t\t\toct: 0,\n\t\t\t\thex: 0\n\t\t\t},\n\t\t\terror: ''\n\t\t},\n\t\tcomputed: {\n\t\t\tresult: function() {\n\t\t\t\twordLength = parseInt(this.blength);\n\t\t\t\treturn this.gettwcs(this.value);\n\t\t\t}\n\t\t},\n\t\twatch: {\n\t\t\terror: function() {\n\t\t\t\tif(this.error) {\n\t\t\t\t\tthis.$el.querySelector('#result-error').MaterialSnackbar.showSnackbar({\n\t\t\t\t\t\ttimeout: 3000,\n\t\t\t\t\t\tmessage: this.error\n\t\t\t\t\t});\n\t\t\t\t\tsetTimeout(() => this.error = '', 3000);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tgettwcs: function(value) {\n\t\t\t\tlet tc,\n\t\t\t\t\tres = {\n\t\t\t\t\t\tbin: invalidValue,\n\t\t\t\t\t\toct: invalidValue,\n\t\t\t\t\t\thex: invalidValue\n\t\t\t\t\t};\n\n\t\t\t\tconst _convertAndFill = (base) => {\n\t\t\t\t\tlet res = convertDecimalToBase(convertBaseToDecimal(tc, 2), base);\n\n\t\t\t\t\t// Fill result with zeros from left to its maximal length according to word length\n\t\t\t\t\twhile(Math.ceil(wordLength / Math.log2(base)) > res.length)\n\t\t\t\t\t\tres = '0' + res;\n\n\t\t\t\t\treturn res;\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\ttc = twosComplement(value);\n\n\t\t\t\t\tif(checkNumber(value) && tc.length <= wordLength)\n\t\t\t\t\t\tres = {\n\t\t\t\t\t\t\tbin: tc,\n\t\t\t\t\t\t\toct: _convertAndFill(8),\n\t\t\t\t\t\t\thex: _convertAndFill(16)\n\t\t\t\t\t\t};\n\t\t\t\t} catch(e) {\n\t\t\t\t\tif(e instanceof RangeError) {\n\t\t\t\t\t\tres = {\n\t\t\t\t\t\t\tbin: invalidValue,\n\t\t\t\t\t\t\toct: invalidValue,\n\t\t\t\t\t\t\thex: invalidValue\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.error = e.message;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t});\n\n}(window, document, Vue));"]}